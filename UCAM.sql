-- MEMBER테이블 생성문(회원가입, 로그인 시 필요)
CREATE TABLE MEMBER (
    NO NUMBER PRIMARY KEY,
    ID VARCHAR2(30) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(100) NOT NULL,
    ROLE VARCHAR2(10) DEFAULT 'ROLE_USER',
    NAME VARCHAR2(15) NOT NULL,
    BIRTH VARCHAR2(15),
    NICKNAME VARCHAR2(50),
    EMAIL VARCHAR2(100),
    PHONE VARCHAR2(13),
    ADDRESS VARCHAR2(100),
    STATUS VARCHAR2(1) DEFAULT 'Y' CHECK(STATUS IN('Y', 'N')),
    ENROLL_DATE DATE DEFAULT SYSDATE,
    MODIFY_DATE DATE DEFAULT SYSDATE
);
--SNS로그인 테스트로 PASSWORD NULL로 변경
ALTER TABLE MEMBER
MODIFY NAME NULL;
--MODIFY PASSWORD NULL;

--PASSWORD NOU NULL로 변경
ALTER TABLE MEMBER
MODIFY PASSWORD NOT NULL;


COMMENT ON COLUMN MEMBER.NO IS '회원번호';
COMMENT ON COLUMN MEMBER.ID IS '회원아이디';
COMMENT ON COLUMN MEMBER.PASSWORD IS '회원비밀번호';
COMMENT ON COLUMN MEMBER.ROLE IS '회원타입';
COMMENT ON COLUMN MEMBER.NAME IS '회원명';
COMMENT ON COLUMN MEMBER.BIRTH IS '회원생일';
COMMENT ON COLUMN MEMBER.NICKNAME IS '회원별명';
COMMENT ON COLUMN MEMBER.EMAIL IS '이메일';
COMMENT ON COLUMN MEMBER.PHONE IS '전화번호';
COMMENT ON COLUMN MEMBER.ADDRESS IS '주소';
COMMENT ON COLUMN MEMBER.STATUS IS '상태값(Y/N)';
COMMENT ON COLUMN MEMBER.ENROLL_DATE IS '회원가입일';
COMMENT ON COLUMN MEMBER.MODIFY_DATE IS '정보수정일';

CREATE SEQUENCE SEQ_UNO;

INSERT INTO MEMBER (
    NO, 
    ID, 
    PASSWORD, 
    ROLE,
    NAME,
    BIRTH,
    NICKNAME, 
    EMAIL,
    PHONE,
    ADDRESS,
    STATUS, 
    ENROLL_DATE, 
    MODIFY_DATE
) VALUES(
    SEQ_UNO.NEXTVAL, 
    'admin1', 
    '1234', 
    'ROLE_ADMIN', 
    '관리자',
    '1800-01-01',
    '관리자',
    'admin@iei.or.kr',
    '010-7777-1111',
    '서울시 서초구',
    DEFAULT,
    DEFAULT,
    DEFAULT
);

COMMIT;

-- 테이블 삭제문
--DROP TABLE MEMBER;
--DROP SEQUENCE SEQ_UNO;

-- SALEBOARD 생성문(판매게시판)
CREATE TABLE SALEBOARD (
    SALE_NO NUMBER PRIMARY KEY,
    SALE_WRITER_NO NUMBER NOT NULL,
    SALE_TITLE VARCHAR2(100) NOT NULL,
    SALE_PRICE VARCHAR2(50) NOT NULL,
    SALE_CATEGORY VARCHAR2(50) NOT NULL,
    SALE_CONTENT VARCHAR2(1000) NOT NULL,
    SALE_FILENAME VARCHAR2(100),
    STATUS VARCHAR2(1) DEFAULT 'Y' CHECK (STATUS IN('Y', 'N')),
    WISH_STATUS VARCHAR2(1) DEFAULT 'N' CHECK (WISH_STATUS IN('Y', 'N')),
    GOODS_STATUS VARCHAR2(10) DEFAULT 'USED' CHECK (GOODS_STATUS IN('USD', 'NOP', 'NEW')),
    DEAL_STATUS VARCHAR2(10) DEFAULT 'DRCT' CHECK (DEAL_STATUS IN('DRCT', 'MAIL', 'SAFE')),
    SALE_DATE DATE DEFAULT SYSDATE 
);

-- 성수님께서 24일날 추가하신 문구(실행 전 테이블에 데이터가 없어야 에러뜨지 않음)
ALTER TABLE SALEBOARD ADD FILESYSTEMNAME VARCHAR(100) NOT NULL;

COMMENT ON COLUMN SALEBOARD.SALE_NO IS '판매글 번호';
COMMENT ON COLUMN SALEBOARD.SALE_WRITER_NO IS '판매글 작성자';
COMMENT ON COLUMN SALEBOARD.SALE_TITLE IS '판매글 제목';
COMMENT ON COLUMN SALEBOARD.SALE_PRICE IS '판매 가격';
COMMENT ON COLUMN SALEBOARD.SALE_CATEGORY IS '카테고리';
COMMENT ON COLUMN SALEBOARD.SALE_CONTENT IS '상품 내용';
COMMENT ON COLUMN SALEBOARD.SALE_FILENAME IS '판매상품자료';
COMMENT ON COLUMN SALEBOARD.STATUS IS '판매 상태값(Y/N)';
COMMENT ON COLUMN SALEBOARD.WISH_STATUS IS '찜한 상태값(Y/N)';
COMMENT ON COLUMN SALEBOARD.GOODS_STATUS IS '물건 상태값(USD/NOP/NEW)';
COMMENT ON COLUMN SALEBOARD.DEAL_STATUS IS '거래 방식(DRCT/MAIL/SAFE)';
COMMENT ON COLUMN SALEBOARD.SALE_DATE IS '판매글 작성일';

CREATE SEQUENCE SEQ_SALEBOARD_NO;




-- 공지테이블 작성 쿼리문 
CREATE TABLE NOTICE (	
    NOTICE_NO NUMBER,
    WRITER_NO NUMBER, 
	NOTICE_TITLE VARCHAR2(100), 
	NOTICE_CONTENT VARCHAR2(4000), 
	READCOUNT NUMBER DEFAULT 0, 
    STATUS VARCHAR2(1) DEFAULT 'Y' CHECK (STATUS IN('Y', 'N')),
    CREATE_DATE DATE DEFAULT SYSDATE, 
    MODIFY_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT PK_NOTICE_NO PRIMARY KEY(NOTICE_NO),
    CONSTRAINT FK_NOTICE_WRITER FOREIGN KEY(WRITER_NO) REFERENCES MEMBER(NO) ON DELETE SET NULL
);

COMMENT ON COLUMN NOTICE.NOTICE_NO IS '공지번호';
COMMENT ON COLUMN NOTICE.WRITER_NO IS '작성자';
COMMENT ON COLUMN NOTICE.NOTICE_TITLE IS '공지제목';
COMMENT ON COLUMN NOTICE.NOTICE_CONTENT IS '공지내용';
COMMENT ON COLUMN NOTICE.READCOUNT IS '조회수';
COMMENT ON COLUMN NOTICE.STATUS IS '상태값(Y/N)';
COMMENT ON COLUMN NOTICE.CREATE_DATE IS '공지등록일';
COMMENT ON COLUMN NOTICE.MODIFY_DATE IS '공지수정일';

CREATE SEQUENCE SEQ_NOTICE_NO;

-- 공지 테이블 삭제 명령어↓
--DROP TABLE NOTICE;
--DROP SEQUENCE SEQ_NOTICE_NO;
--SELECT SEQ_NOTICE_NO.CURRVAL FROM DUAL;

INSERT INTO NOTICE VALUES(SEQ_NOTICE_NO.NEXTVAL, 1, '유캠프 운영정책 안내',  '운영정책에 대해서 말씀드립니다.', DEFAULT, 'Y', SYSDATE, SYSDATE);
INSERT INTO NOTICE VALUES(SEQ_NOTICE_NO.NEXTVAL, 1, '안전거래 캠페인에 따른 공지',  '안전거래 캠페인에 대해서 말씀드립니다.', DEFAULT, 'Y', SYSDATE, SYSDATE);
INSERT INTO NOTICE VALUES(SEQ_NOTICE_NO.NEXTVAL, 1, '게시판 거래 정책 안내',  '게시판 거래 정책에 대해서 말씀드립니다.', DEFAULT, 'Y', SYSDATE, SYSDATE);
INSERT INTO NOTICE VALUES(SEQ_NOTICE_NO.NEXTVAL, 1, '개인정보처리방침',  '개인정보 처리방침에 대해서 말씀드립니다.', DEFAULT, 'Y', SYSDATE, SYSDATE);
INSERT INTO NOTICE VALUES(SEQ_NOTICE_NO.NEXTVAL, 1, '지역광고 후기 이벤트 당첨자를 공개해요!',  '지역광고 후기 이벤트 당첨자를 공개합니다. 당첨자는...감자킹님입니다!', DEFAULT, 'Y', SYSDATE, SYSDATE);
INSERT INTO NOTICE VALUES(SEQ_NOTICE_NO.NEXTVAL, 1, '[이벤트] 반려동물과 함께 캠핑을 즐기자!',  '반려동물과 함께 캠핑을 즐기자! 이벤트 안내입니다.', DEFAULT, 'Y', SYSDATE, SYSDATE);
INSERT INTO NOTICE VALUES(SEQ_NOTICE_NO.NEXTVAL, 1, '[공지] 새해에도 행복한 일 가득하세요!',  '새해맞이 인사드립니다. <br>다들 행복한 새해되세요. ', DEFAULT, 'Y', SYSDATE, SYSDATE);
INSERT INTO NOTICE VALUES(SEQ_NOTICE_NO.NEXTVAL, 1, '[이벤트] 새해맞이 복주머니 찾기',  '새해맞이 복주머니 이벤트 진행예정입니다. <br><br>사이트에 숨어있는 복주머니를 찾아주세요!<br>기간은 1월 31일까지입니다. ', DEFAULT, 'Y', SYSDATE, SYSDATE);

COMMIT;

-- 쿼리문 짜면서 테스트하던 부분
--SELECT COUNT(*) FROM NOTICE WHERE STATUS='Y';
--SELECT RNUM, NOTICE_NO, NOTICE_TITLE, ID, CREATE_DATE, READCOUNT, STATUS FROM 
--(SELECT ROWNUM AS RNUM, 
--NOTICE_NO, 
--NOTICE_TITLE, ID, 
--CREATE_DATE, READCOUNT, 
--STATUS FROM 
--(SELECT N.NOTICE_NO, 
--N.NOTICE_TITLE, 
--M.ID, 
--N.CREATE_DATE, 
--N.READCOUNT, 
--N.STATUS 
--FROM NOTICE N JOIN MEMBER M ON(N.WRITER_NO = M.NO) 
--WHERE N.STATUS = 'Y' ORDER BY 
--N.NOTICE_NO DESC)) 
--WHERE RNUM BETWEEN 1 and 1;



-- 1:1게시글 등록 테이블
CREATE TABLE QBOARD (
    OTO_NO NUMBER PRIMARY KEY,
    OTO_WRITER_NO NUMBER NOT NULL,
    OTO_TITLE VARCHAR2(100) NOT NULL,
    OTO_CONTENT VARCHAR2(1000) NOT NULL,
    OTO_FILENAME VARCHAR2(100),
    STATUS VARCHAR2(1) DEFAULT 'Y' CHECK (STATUS IN('Y', 'N')),
    OTO_DATE DATE DEFAULT SYSDATE, 
    CONSTRAINT FK_QBOARD_USER FOREIGN KEY(OTO_WRITER_NO) REFERENCES MEMBER(NO) ON DELETE SET NULL
);

-- 서희님 쿼리문에 추가해야하는 내용(파일 다운로드 할때 필요한 컬럼)
ALTER TABLE QBOARD ADD RENAMED_FILENAME VARCHAR2(100);
COMMENT ON COLUMN QBOARD.RENAMED_FILENAME IS '1:1문의 파일 수정된 이름';

COMMENT ON COLUMN QBOARD.OTO_NO IS '1:1 문의 번호';
COMMENT ON COLUMN QBOARD.OTO_WRITER_NO IS '1:1 문의 사용자 번호';
COMMENT ON COLUMN QBOARD.OTO_TITLE IS '1:1 문의 제목';
COMMENT ON COLUMN QBOARD.OTO_CONTENT IS '1:1 문의 내용';
COMMENT ON COLUMN QBOARD.OTO_FILENAME IS '1:1 문의 파일';
COMMENT ON COLUMN QBOARD.STATUS IS '1:1 상태값(Y/N)';
COMMENT ON COLUMN QBOARD.OTO_DATE IS '1:1 문의 작성일';

CREATE SEQUENCE SEQ_QBOARD_NO;

INSERT INTO QBOARD VALUES(SEQ_QBOARD_NO.NEXTVAL, 1, '문의', '배송 관련 문의 드립니다.', '', 'Y', DEFAULT, DEFAULT);
INSERT INTO QBOARD VALUES(SEQ_QBOARD_NO.NEXTVAL, 2, '1:1 문의 1', '안녕하세요, 신고 회원 관련 문의 드립니다.', '', 'Y', DEFAULT, DEFAULT);
INSERT INTO QBOARD VALUES(SEQ_QBOARD_NO.NEXTVAL, 2, '1:1 문의 1', '안녕하세요, 환불 관련 문의 드립니다.', '', 'Y', DEFAULT, DEFAULT);
INSERT INTO QBOARD VALUES(SEQ_QBOARD_NO.NEXTVAL, 2, '1:1 문의 1', '안녕하세요, 차단 회원 관련 문의 드립니다.', '', 'Y', DEFAULT, DEFAULT);

COMMIT;

BEGIN
    FOR N IN 1..4
    LOOP
        INSERT INTO QBOARD VALUES(SEQ_QBOARD_NO.NEXTVAL, 1, '1:1 문의 ' || SEQ_QBOARD_NO.CURRVAL, '안녕하세요, 배송 관련 문의 드립니다.', '', 'Y', DEFAULT, DEFAULT);
        INSERT INTO QBOARD VALUES(SEQ_QBOARD_NO.NEXTVAL, 1, '1:1 문의 ' || SEQ_QBOARD_NO.CURRVAL, '안녕하세요, 신고 회원 관련 문의 드립니다.','', 'Y', DEFAULT, DEFAULT);
        INSERT INTO QBOARD VALUES(SEQ_QBOARD_NO.NEXTVAL, 1, '1:1 문의 ' || SEQ_QBOARD_NO.CURRVAL, '안녕하세요, 환불 관련 문의 드립니다.', '', 'Y', DEFAULT, DEFAULT);
        INSERT INTO QBOARD VALUES(SEQ_QBOARD_NO.NEXTVAL, 1, '1:1 문의 ' || SEQ_QBOARD_NO.CURRVAL, '안녕하세요, 차단 회원 관련 문의 드립니다.', '', 'Y', DEFAULT, DEFAULT);
    END LOOP;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN ROLLBACK;
END;
/

-- 서희님 쿼리문 확인중
--SELECT COUNT(*) FROM QBOARD WHERE STATUS='Y';
--INSERT INTO QBOARD VALUES(SEQ_QBOARD_NO.NEXTVAL, 2, '1:1문의', '안녕안녕', '', DEFAULT, DEFAULT);
--UPDATE QBOARD SET OTO_TITLE='하이하이',OTO_CONTENT='하이루이',OTO_FILENAME='',OTO_DATE=SYSDATE WHERE OTO_NO=24;
--SELECT Q.OTO_NO, Q.OTO_TITLE, M.ID, Q.OTO_FILENAME, Q.OTO_CONTENT, Q.OTO_DATE FROM QBOARD Q JOIN MEMBER M ON(Q.OTO_WRITER_NO = M.NO) WHERE Q.STATUS = 'Y' AND Q.OTO_NO=6;
--
--SELECT RNUM, OTO_NO, OTO_TITLE, ID, OTO_DATE, OTO_FILENAME, STATUS FROM 
--(SELECT ROWNUM AS RNUM, OTO_NO, OTO_TITLE, ID, 
--OTO_DATE, OTO_FILENAME, 
--STATUS FROM 
--(SELECT Q.OTO_NO, Q.OTO_TITLE, M.ID, Q.OTO_DATE, Q.OTO_FILENAME, Q.STATUS FROM 
--QBOARD Q JOIN MEMBER M ON(Q.OTO_WRITER_NO = M.NO) WHERE Q.STATUS = 'Y' ORDER BY Q.OTO_NO DESC)) 
--WHERE RNUM BETWEEN 1 and 10;
--
--SELECT Q.OTO_NO, Q.OTO_TITLE, M.ID, Q.OTO_FILENAME, Q.OTO_CONTENT, Q.OTO_DATE FROM QBOARD Q JOIN MEMBER M ON(Q.OTO_WRITER_NO = M.NO) WHERE Q.STATUS = 'Y' AND Q.OTO_NO=6;
--
--SELECT OTO_FILENAME FROM QBOARD WHERE STATUS='Y';

--UPDATE QBOARD SET OTO_TITLE='수정할래2',OTO_CONTENT='ㅇㅇㅇ',OTO_FILENAME='',RENAMED_FILENAME='' WHERE OTO_NO=50;



-- 상품디테일 안나와서 확인하려고 찍는 쿼리문
--SELECT S.SALE_WRITER_NO, 
--       S.SALE_NO, 
--       S.SALE_TITLE, 
--       S.SALE_CATEGORY, 
--       M.ID, 
--       S.SALE_CONTENT, 
--       S.SALE_FILENAME, 
--       S.SALE_PRICE, 
--       S.DEAL_STATUS,
--       S.GOODS_STATUS,
--       S.WISH_STATUS,
--       SALE_DATE, 
--       S.FILESYSTEMNAME 
--       FROM SALEBOARD S JOIN MEMBER M ON(S.SALE_WRITER_NO = M.NO) 
--       WHERE S.STATUS = 'Y' AND S.SALE_NO=21;

-- 댓글 테이블
CREATE TABLE REPLY(
  NO NUMBER PRIMARY KEY,
  SALE_NO NUMBER,
  WRITER_NO NUMBER,     
  CONTENT VARCHAR2(400),
  STATUS VARCHAR2(1) DEFAULT 'Y' CHECK (STATUS IN ('Y', 'N')),
  CREATE_DATE DATE DEFAULT SYSDATE,
  MODIFY_DATE DATE DEFAULT SYSDATE,            
  FOREIGN KEY (SALE_NO) REFERENCES SALEBOARD,     
  FOREIGN KEY (WRITER_NO) REFERENCES MEMBER    
);

CREATE SEQUENCE SEQ_REPLY_NO;

COMMENT ON COLUMN "REPLY"."NO" IS '댓글번호';
COMMENT ON COLUMN "REPLY"."SALE_NO" IS '댓글이작성된게시글';
COMMENT ON COLUMN "REPLY"."WRITER_NO" IS '댓글작성자';
COMMENT ON COLUMN "REPLY"."CONTENT" IS '댓글내용';
COMMENT ON COLUMN "REPLY"."STATUS" IS '상태값(Y/N)';
COMMENT ON COLUMN "REPLY"."CREATE_DATE" IS '댓글올린날짜';
COMMENT ON COLUMN "REPLY"."MODIFY_DATE" IS '댓글수정날짜';

INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, 41, 2, '안녕하세요.', DEFAULT, DEFAULT, DEFAULT);
INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, 41, 1, '반갑습니다.', DEFAULT, DEFAULT, DEFAULT);

COMMIT;

-- 쿼리문 확인중
SELECT R.NO, R.SALE_NO, R.CONTENT, M.ID, TO_CHAR(R.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS'), R.MODIFY_DATE 
    FROM REPLY R JOIN MEMBER M ON(R.WRITER_NO = M.NO) 
    WHERE R.STATUS='Y' AND SALE_NO=48 ORDER BY R.NO;

--TO_CHAR(SYSDATE, 'HH24:MI:SS')
-- 댓글 삭제 쿼리문 테스트
UPDATE REPLY SET STATUS='N' WHERE NO=2;


-- SNS로그인 테이블
CREATE TABLE SNS_LOGIN (
    NO NUMBER REFERENCES MEMBER(NO) CONSTRAINT SNS_LOGIN_PK PRIMARY KEY,
    SNS_ID VARCHAR2(50) CONSTRAINT LOCAL_CODE_NN NOT NULL,
    SNS_TYPE VARCHAR2(50) CONSTRAINT LOCAL_NAME_NN NOT NULL,
    SNS_NAME VARCHAR2(50) CONSTRAINT LOCAL_NAME_ENG_NN NOT NULL,
    SNS_PROFILE VARCHAR2(200), 
    SNS_CONNECT_DATE DATE
);

-- 테이블 삭제문
--DROP TABLE SNS_LOGIN;

-- SNS로그인 테이블 코멘트 입력
COMMENT ON COLUMN SNS_LOGIN.NO IS '회원번호';
COMMENT ON COLUMN SNS_LOGIN.SNS_ID IS 'SNS아이디';
COMMENT ON COLUMN SNS_LOGIN.SNS_TYPE IS 'SNS타입';
COMMENT ON COLUMN SNS_LOGIN.SNS_NAME IS 'SNS닉네임';
COMMENT ON COLUMN SNS_LOGIN.SNS_PROFILE IS 'SNS이미지';
COMMENT ON COLUMN SNS_LOGIN.SNS_CONNECT_DATE IS 'SNS연결날짜';

INSERT INTO SNS_LOGIN (
    NO, 
    SNS_ID, 
    SNS_TYPE, 
    SNS_NAME,
    SNS_PROFILE,
    SNS_CONNECT_DATE
) VALUES(
    SEQ_UNO.NEXTVAL, 
    'admin3', 
    '카카오', 
    '관리자3', 
    '프로필이미지',
    DEFAULT
);


-- MEMBER 테이블 생성
--CREATE TABLE MEMBER (
--    MEMBER_NO NUMBER CONSTRAINT MEM_MEMBER_NO_PK PRIMARY KEY,
--    MEMBER_STATUS VARCHAR2(1) DEFAULT 'Y' CONSTRAINT MEM_MEMBER_STATUS CHECK(MEMBER_STATUS IN('Y', 'N')),
--    MEMBER_ROLE VARCHAR2(20) CONSTRAINT MEM_MEMBER_ROLE_NN NOT NULL,
--    INTEREST VARCHAR2(500) CONSTRAINT MEM_MEMBER_INTEREST_NN NOT NULL,
--    NAT_CODE NUMBER CONSTRAINT MEM_NAT_CODE_NN NOT NULL,
--    LC_ONE NUMBER CONSTRAINT MEM_LC_ONE_NN NOT NULL,
--    LC_ONE_LV NUMBER CONSTRAINT MEM_LC_ONE_LV_NN NOT NULL,
--    LOCAL_CODE NUMBER CONSTRAINT MEM_LOCAL_CODE_NN NOT NULL,
--
--    ID VARCHAR2(20) CONSTRAINT MEM_ID_NN_NOT NULL,
--    PWD VARCHAR2(100) CONSTRAINT MEM_PWD_NN NOT NULL,
--    EMAIL VARCHAR2(20) CONSTRAINT MEM_EMAIL_NN NOT NULL,
--    NICKNAME VARCHAR2(50) CONSTRAINT MEM_NICKNAME_NN NOT NULL,
--    LC_TWO NUMBER,
--    LC_TWO_LV NUMBER,
--    LC_THR NUMBER,
--    LC_THR_LV NUMBER,
--
--    ENROLL_DATE DATE DEFAULT SYSDATE,
--    MODIFY_DATE DATE DEFAULT SYSDATE,
--    ORIGINAL_FILENAME VARCHAR2(200), 
--
--
--    CONSTRAINT MEMBER_ID_UQ UNIQUE(ID),
--    CONSTRAINT MEMBER_NICKNAME_UQ UNIQUE(NICKNAME),
--
--    CONSTRAINT MEM_NAT_CODE_FK FOREIGN KEY(NAT_CODE) REFERENCES NATIONALITY(NAT_CODE),
--    CONSTRAINT MEM_LC_ONE_FK FOREIGN KEY(LC_ONE) REFERENCES LANGUAGE(LANG_CODE),
--    CONSTRAINT MEM_LOCAL_CODE_FK FOREIGN KEY(LOCAL_CODE) REFERENCES LOCAL(LOCAL_CODE)
--);